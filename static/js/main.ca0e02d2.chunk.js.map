{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","mglt","setMglt","loading","setLoading","starships","setStarships","stops","setStops","useEffect","fetch","then","response","json","data","results","calculate","stopsAux","forEach","starship","consumablesInHours","s","split","ts","unit","t","parseFloat","includes","convertToHours","consumables","maxLengthWithoutResuply","MGLT","push","name","Math","floor","className","Navbar","bg","variant","Brand","href","Container","Row","Col","md","style","Form","Group","controlId","Label","Control","type","onChange","event","target","value","onKeyPress","key","console","log","Button","onClick","map","stop","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAgHeA,MApGf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAICC,EAJD,KAMbC,qBAAU,WACRC,MAAM,oCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAaQ,EAAKC,SAClBX,GAAW,QAEd,IAEH,IAcMY,EAAY,WAChB,IAAMC,EAAW,GACjBZ,EAAUa,SAAQ,SAAAC,GAChB,IAAMC,EAjBa,SAAAC,GAAM,IAAD,EACPA,EAAEC,MAAM,KADD,mBACnBC,EADmB,KACfC,EADe,KAEpBC,EAAIC,WAAWH,GACrB,OAAIC,EAAKG,SAAS,QACL,KAAJF,EACED,EAAKG,SAAS,SACZ,IAAJF,EACED,EAAKG,SAAS,QACZ,IAAJF,EACED,EAAKG,SAAS,OACZ,GAAJF,OADF,EAQsBG,CAAeT,EAASU,aAC7CC,EAA0BJ,WAAWP,EAASY,MAAQX,EAC5DH,EAASe,KAAK,CACZC,KAAMd,EAASc,KACf1B,MAAO2B,KAAKC,MAAMlC,EAAO6B,QAG7BtB,EAASS,IAgDX,OACE,sBAAKmB,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAA1B,SACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,oCAEDtC,EAjDH,cAACuC,EAAA,EAAD,CAAWN,UAAU,UAArB,SACE,6CAWF,eAACM,EAAA,EAAD,CAAWN,UAAU,UAArB,UACE,cAACO,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,MAAO,CAAC,cAAiB,QAAtC,UACI,eAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,yBACA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,SACLC,SAAU,SAAAC,GAAK,OAAIpD,EAAQwB,WAAW4B,EAAMC,OAAOC,SACnDC,WAAY,SAAAH,GACQ,UAAdA,EAAMI,MACRC,QAAQC,IAAI,QACZ5C,WAKR,cAAC6C,EAAA,EAAD,CACEtB,QAAQ,UACRuB,QAAS9C,EAFX,wBAQN,cAAC2B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UA/BJrC,EAAMwD,KAAI,SAACC,EAAMC,GAAP,OACR,8BAAoBD,EAAK/B,KAAzB,KAAiC+B,EAAKzD,QAA9ByD,EAAK/B,oBClDJiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ca0e02d2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\n\nfunction App() {\n  const [mglt, setMglt] = useState();\n  const [loading, setLoading] = useState(true);\n  const [starships, setStarships] = useState({});\n  const [stops, setStops] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://swapi.dev/api/starships/\")\n      .then(response => response.json())\n      .then(data => {\n        setStarships(data.results);\n        setLoading(false);\n      });\n  }, []);\n\n  const convertToHours = s => {\n    const [ts, unit] = s.split(\" \");\n    const t = parseFloat(ts);\n    if (unit.includes(\"year\")) {\n      return t * 8760;\n    } else if (unit.includes(\"month\")) {\n      return t * 720;\n    } else if (unit.includes(\"week\")) {\n      return t * 168;\n    } else if (unit.includes(\"day\")) {\n      return t * 24;\n    }\n  }\n\n  const calculate = () => {\n    const stopsAux = [];\n    starships.forEach(starship => {\n      const consumablesInHours = convertToHours(starship.consumables);\n      const maxLengthWithoutResuply = parseFloat(starship.MGLT) * consumablesInHours;\n      stopsAux.push({\n        name: starship.name,\n        stops: Math.floor(mglt / maxLengthWithoutResuply)\n      });\n    });\n    setStops(stopsAux);\n  };\n\n  const renderLoading = () => (\n    <Container className=\"content\">\n      <p>Loading...</p>\n    </Container>\n  );\n\n  const renderStops = () => (\n    stops.map((stop, index) => (\n      <p key={stop.name}>{stop.name}: {stop.stops}</p>\n    ))\n  );\n\n  const renderContent = () => (\n    <Container className=\"content\">\n      <Row>\n        <Col md={12} style={{\"paddingBottom\": \"30px\"}}>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Megalights</Form.Label>\n              <Form.Control\n                type=\"number\"\n                onChange={event => setMglt(parseFloat(event.target.value))}\n                onKeyPress={event => {\n                  if (event.key === \"Enter\") {\n                    console.log(\"test\")\n                    calculate();\n                  }\n                }}\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              onClick={calculate}\n            >\n              Apply\n            </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {renderStops()}\n        </Col>\n      </Row>\n    </Container>\n  );\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"\\\">nata.house Challenge</Navbar.Brand>\n      </Navbar>\n      {loading\n        ? renderLoading()\n        : renderContent()\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}